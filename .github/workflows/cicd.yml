name: build and deploy kafka-consumer
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
jobs:
  project-build:
    name: Build kafka-consumer
    runs-on: ubuntu-latest


    services:
      zookeeper:
        image: confluentinc/cp-zookeeper:5.4.0
        ports:
          - 2181:2181
        options: >-
          --health-cmd "nc -z localhost:2181"
          --health-interval 20s
          --health-timeout 10s
          --health-retries 5
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000

      kafka:
        image: cconfluentinc/cp-server:5.4.0
        ports:
          - 9092:9092
        options: >-
          --health-cmd "nc -z localhost:9092"
          --health-interval 20s
          --health-timeout 10s
          --health-retries 5
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
          KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
          KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
          KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_CREATE_TOPICS: "test_topic:1:3"
          CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
          CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
          CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
          CONFLUENT_METRICS_ENABLE: "true"
          CONFLUENT_SUPPORT_CUSTOMER_ID: "anonymous"
        depends_on:
          zookeeper:
            condition: service_healthy

      schema-registry:
        image: confluentinc/cp-schema-registry:5.4.0
        ports:
          - 8081:8081
        options: >-
          --health-cmd "nc -z localhost:8081"
          --health-interval 20s
          --health-timeout 10s
          --health-retries 5
        env:
          SCHEMA_REGISTRY_HOST_NAME: schema-registry
          SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: "zookeeper:2181"

      control-center:
        image: confluentinc/cp-enterprise-control-center:5.4.0
        ports:
          - 9021:9021
        options: >-
          --health-cmd "nc -z localhost:9021"
          --health-interval 20s
          --health-timeout 10s
          --health-retries 5
        env:
          CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
          CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
          CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
          CONTROL_CENTER_REPLICATION_FACTOR: 1
          CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
          CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
          CONFLUENT_METRICS_TOPIC_REPLICATION: 1
          PORT: 9021

    env:
      SPRING_PROFILES_ACTIVE: default
      SCHEMA_REGISTRY_URL: http://localhost:8081
      BOOTSTRAP_SERVER_CONFIG: localhost:9092
      GROUP_ID: group_id


    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean install

      - name: Run tests
        run: mvn test

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v3
#
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v3

      - name: Build and push the docker image to docker hub
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: raulalanis/kafka-consumer:${{ github.sha }}